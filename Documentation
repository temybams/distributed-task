Project: Distributed Task Queue System

A Node.js-based distributed task queue system with fault tolerance, dynamic scaling, and monitoring. Uses Redis, BullMQ, and Docker Swarm.


Technology Choices
- BullMQ: Provides job scheduling, retries, and priority queues.
- Redis: Acts as a fast, in-memory job broker.
- Docker Swarm: Enables horizontal scaling of workers.

How it Works:

- The API (task-api) receives task requests and pushes them to BullMQ.
- Redis acts as the message broker.
- Workers (task-worker) pick up jobs and process them asynchronously.
- The system is horizontally scalable via Docker Swarm.
- BullMQ Admin Panel allows real-time monitoring of tasks.

1. Prerequisites

Ensure the following are installed:

-- Docker & Docker Compose

--Node.js 

--Redis CLI 

2. Configuration Files

.env :
REDIS_HOST=task-queue_redis
REDIS_PORT=6379

-- Deployment:
Clean Up Previous Deployments (If Any):
docker stack rm task_queue
docker network rm task-queue
docker system prune -a -f
docker volume prune -f

-- Build and Deploy the Stack:
docker stack deploy -c docker-compose.yml task_queue

-- Delete and Redeploy Containers
docker stack rm task_queue
docker system prune -a -f
docker stack deploy -c docker-compose.yml task_queue

-- Verify Services:
docker service ls

-- Check Redis Connection
docker exec -it $(docker ps --filter "name=task_queue_task-api" -q | head -n 1) sh
redis-cli -h redis -p 6379 PING

-- Monitor Jobs:
http://localhost:3000/admin/queues

for  exmaple testing:
curl -X POST http://localhost:3000/api/enqueue -H "Content-Type: application/json" -d '{
"task": {
"taskId": "1234",
"type": "email",
"data": {
"to": "user@example.com",
"subject": "Welcome!",
"body": "Thanks for signing up!"
}
}
}'
